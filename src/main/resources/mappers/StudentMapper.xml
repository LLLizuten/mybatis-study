<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <!--
     namespace:命名空间,必须有值,且是唯一值;使用Mapper接口的全限定名称
     作用:参与识别sql语句
    在mapper里可以写<insert> <update> <delete> <select>
    -->
<mapper namespace="mapper.StudentMapper">
    <!-- id:要执行的sql语句的唯一标识，推荐使用对应mapper接口的方法名来命名 -->
    <insert id="insertStudent">
        insert into student values (9, '学生', 'email@qq.com', 13)
    </insert>

    <!-- void update -->
    <update id="update">
        update student set name = '李明' where id = 9
    </update>
    <!-- void delete -->
    <delete id="delete">
        delete from student where id = 7
    </delete>

    <!-- pojo.Student query  resultType:返回的结果类型-->
    <select id="query" resultType="pojo.Student">
        select * from student where id = 2
    </select>

    <!-- Student queryById -->
    <select id="queryById" resultType="pojo.Student">
        select * from student where id = #{id}
    </select>

    <!-- void insertStudent2(Student student) -->
    <insert id="insertStudent2">
        insert into student values(#{id}, #{name}, #{email}, #{age})
    </insert>

    <!-- Student queryByIdAndName(@Param("id") int id, @Param("name") String name) -->
    <select id="queryByIdAndName" resultType="pojo.Student">
        select * from student where id = #{id} and name=#{name}
    </select>

    <!-- List<Student> queryByLike(String name) -->
    <select id="queryByLike" resultType="pojo.Student">
        select * from student where name like "%"#{name}"%"
    </select>

    <!-- void deleteMore(String ids) -->
    <delete id="deleteMore">
        delete from student where id in (${ids})
    </delete>

    <!-- List<Student> getAllStudents(@Param("tableName") String tableName) -->
    <select id="getAllStudents" resultType="pojo.Student">
        select * from ${tableName}
    </select>

</mapper>